function [ oderhs ] = coupled_oscillator_phase_difference_odes_backwardsprop( dim, ...
                    H_m, H_p, H_g, mu, CN, eps_prop, eps_gap )
%COUPLED_OSCILLATOR_PHASE_DIFFERENCE_ODES Generates ODEs for the 
%       phase difference model for the coupled NM oscillators with
%       backwards proprioception
%
% Inputs:
%       dim - number of oscillators in chain
%       H_m - coupling function for mechanical coupling (K' -> K)
%       H_p - coupling function for proprioceptive coupling (K -> V)
%       H_g - coupling function for electrical coupling (V -> V)
%       Gamma - strength of mechanical coupling
%       eps_prop - strength of proprioceptive coupling
%       eps_gap - strength of electrical coupling
%      
% Outputs:
%       oderhs - rhs function for the ode for phase differences


% -- Mechanical coupling -compute weight matrix B---
gridsz = 1;
%second-difference matrix A
delX = 1/(gridsz*dim);
e = ones(gridsz*dim,1);
D2 = spdiags([e -2*e e], [0 1 2], gridsz*dim, gridsz*dim+2);
%4th difference operator
D4 = D2*D2';
D4(1,1) = 7; D4(end,end) = 7; %moment-free, force-free BCs
D4 = (1/delX^4).*D4;
%spread operator
rowinds = 1:gridsz*dim;
colinds = repelem(1:dim, gridsz);
npdf_ids = -1:2/(gridsz-1):1;
S = sparse(rowinds, colinds, repmat(normpdf(npdf_ids)/max(normpdf(npdf_ids)),1,dim));
%proprioceptive averaging matrix
rowinds = repelem(1:dim,gridsz);
colinds = 1:gridsz*dim;
% Pa = sparse(rowinds, colinds, (1/gridsz).*ones(gridsz*dim,1));
Pa = sparse(rowinds, colinds, (1/gridsz).*repmat(normpdf(npdf_ids)/max(normpdf(npdf_ids)),1,dim));
%mechanical coupling weight matrix B
B = Pa*((D4)\S);

%Function to help with all->all-coupling in mechanical coupling
%For given i, make vector of theta(j) - theta(i) for every j in terms of phi's
% e.g. theta(1) - theta(i) = -[phi(i-1) + ... + phi(1)]
%      theta_n - theta_i = [phi(n-1) + ... + phi(i)]
thj_min_thi = @(phi, i, n) ...
    [-flip(cumsum(phi(i-1:-1:1))); ... %For each j<i, need to sum phi backwards from i until j
    0; ... %theta(i) - theta(i) = 0 no matter what i is
    cumsum(phi(i:n-1));]; %For each j>i, need to sum phi forwards from i until j


%set up phase-difference odes
if dim>2
    dphi_dt = cell(1,dim-1);
    dphi_dt{1} = @(t,phi) -CN/mu*(sum(B(2,:)'.*H_m(thj_min_thi(phi,2,dim))) ...
                -sum(B(1,:)'.*H_m(thj_min_thi(phi,1,dim)))) ...
                    +2*eps_gap*(H_g(-phi(1))-H_g(phi(1)) + H_g(phi(2))) ...
                    +2*eps_prop*(-H_p(phi(1))+H_p(phi(2)));
    for jj=2:dim-2
        dphi_dt{jj} = @(t,phi)  -CN/mu*(sum(B(jj+1,:)'.*H_m(thj_min_thi(phi,jj+1,dim))) ...
                    -sum(B(jj,:)'.*H_m(thj_min_thi(phi,jj,dim)))) ...
                    +2*eps_gap*(H_g(-phi(jj))-H_g(phi(jj)) + H_g(phi(jj+1)) ...
                    -H_g(-phi(jj-1))) ...
                    +2*eps_prop*(-H_p(phi(jj)) + H_p(phi(jj+1)));
    end
    jj=dim-1;
    dphi_dt{jj} = @(t,phi)   -CN/mu*(sum(B(jj+1,:)'.*H_m(thj_min_thi(phi,jj+1,dim))) ...
                    -sum(B(jj,:)'.*H_m(thj_min_thi(phi,jj,dim)))) ...
                    +2*eps_gap*(H_g(-phi(jj))-H_g(phi(jj))-H_g(-phi(jj-1))) ...
                    +2*eps_prop*(-H_p(phi(jj)) );
                
  if dim==3
      oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi);];

 elseif dim==4
      oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi);];
 elseif dim==5
         oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);];            
  elseif dim==6              
        oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi);];
  elseif dim==7
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                 ];
   elseif dim==8
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                dphi_dt{7}(t, phi); ];
    elseif dim==9
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                dphi_dt{7}(t, phi); dphi_dt{8}(t, phi);];
    elseif dim==10
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                dphi_dt{7}(t, phi); dphi_dt{8}(t, phi); ...
                dphi_dt{9}(t, phi); ];
    elseif dim==11
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                dphi_dt{7}(t, phi); dphi_dt{8}(t, phi); ...
                dphi_dt{9}(t, phi); dphi_dt{10}(t, phi); ];
    elseif dim==12
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                dphi_dt{7}(t, phi); dphi_dt{8}(t, phi); ...
                dphi_dt{9}(t, phi); dphi_dt{10}(t, phi); ...
                dphi_dt{11}(t, phi);];
            
    elseif dim==15
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                dphi_dt{7}(t, phi); dphi_dt{8}(t, phi); ...
                dphi_dt{9}(t, phi); dphi_dt{10}(t, phi); ...
                dphi_dt{11}(t, phi); dphi_dt{12}(t, phi); ...
                dphi_dt{13}(t, phi); dphi_dt{14}(t, phi); ];
            
    elseif dim==20
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                dphi_dt{7}(t, phi); dphi_dt{8}(t, phi); ...
                dphi_dt{9}(t, phi); dphi_dt{10}(t, phi); ...
                dphi_dt{11}(t, phi); dphi_dt{12}(t, phi); ...
                dphi_dt{13}(t, phi); dphi_dt{14}(t, phi); ...
                dphi_dt{15}(t, phi); dphi_dt{16}(t, phi); ...
                dphi_dt{17}(t, phi); dphi_dt{18}(t, phi); ...
                dphi_dt{19}(t, phi); ];
            
    elseif dim==25
     oderhs = @(t, phi) [dphi_dt{1}(t,phi); dphi_dt{2}(t, phi); ...
                dphi_dt{3}(t, phi); dphi_dt{4}(t, phi);...
                dphi_dt{5}(t, phi); dphi_dt{6}(t, phi);...
                dphi_dt{7}(t, phi); dphi_dt{8}(t, phi); ...
                dphi_dt{9}(t, phi); dphi_dt{10}(t, phi); ...
                dphi_dt{11}(t, phi); dphi_dt{12}(t, phi); ...
                dphi_dt{13}(t, phi); dphi_dt{14}(t, phi); ...
                dphi_dt{15}(t, phi); dphi_dt{16}(t, phi); ...
                dphi_dt{17}(t, phi); dphi_dt{18}(t, phi); ...
                dphi_dt{19}(t, phi); dphi_dt{20}(t, phi); ...
                dphi_dt{21}(t, phi); dphi_dt{22}(t, phi); ...
                dphi_dt{23}(t, phi); dphi_dt{24}(t, phi); ];        
                           
 end     
         
else
    oderhs = @(t,phi) -CN/mu*B(1,2)*(H_m(-phi) - H_m(phi)) + ...
                2*eps_gap*(H_g(-phi) - H_g(phi)) - 2*eps_prop*(H_p(-phi));
end




end

